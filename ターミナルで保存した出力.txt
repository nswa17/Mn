juliaLast login: Mon May  9 13:54:19 on ttys000
nakada-no-MacBook-Pro:~ neon$ julia
               _
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.4.5 (2016-03-18 00:58 UTC)
 _/ |\__'_|_|_|\__'_|  |  Official http://julialang.org/ release
|__/                   |  x86_64-apple-darwin13.4.0

julia> a = [1 2; 3 4
       ]
2x2 Array{Int64,2}:
 1  2
 3  4

julia> sum(a)
10

julia> length(a)
4

julia> match(r"\b+", "122")
ERROR: PCRE compilation error: quantifier does not follow a repeatable item at offset 2

julia> r"^\s*(?:#|$)"
r"^\s*(?:#|$)"

julia> r"\b"
r"\b"

julia> r"\b+"
ERROR: PCRE compilation error: quantifier does not follow a repeatable item at offset 2

julia> match(r"\b", "122")
RegexMatch("")

julia> match(r"\b", "122").captures
0-element Array{Union{SubString{UTF8String},Void},1}

julia> match(r"[0-9]", "122").captures
0-element Array{Union{SubString{UTF8String},Void},1}

julia> match(r"^[0-9]+", "122").captures
0-element Array{Union{SubString{UTF8String},Void},1}

julia> match(r"^([0-9])+", "122").captures
1-element Array{Union{SubString{UTF8String},Void},1}:
 "2"

julia> match(r"(\b)", "122").captures
1-element Array{Union{SubString{UTF8String},Void},1}:
 ""

julia> match(r"(\b+)", "122").captures
ERROR: PCRE compilation error: quantifier does not follow a repeatable item at offset 3

julia> match(r"([0-9]+", "122").captures
ERROR: PCRE compilation error: missing closing parenthesis at offset 7

julia> match(r"([0-9]+)", "122").captures
1-element Array{Union{SubString{UTF8String},Void},1}:
 "122"

julia> match(r"([0-9]+)", "122").captures[1]
"122"

julia> parse(Int, match(r"([0-9]+)", "122").captures[1])
122

julia> match(r"([0-9]+)", "a122").captures[1]
"122"

julia> Matrix{Int, 2, 2}
ERROR: too many parameters for type typealias

julia> Matrix(2, 2)
2x2 Array{Any,2}:
 #undef  #undef
 #undef  #undef

julia> a = zeros(2, 2)
2x2 Array{Float64,2}:
 0.0  0.0
 0.0  0.0

julia> ones(Int, 2)
2-element Array{Int64,1}:
 1
 1

julia> ones(Int, 1)
1-element Array{Int64,1}:
 1

julia> ones(Int, 100)
100-element Array{Int64,1}:
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
 ⋮
 1
 1
 1
 1
 1
 1
 1
 1
 1

julia> 1 + ones(Int, 2)
2-element Array{Int64,1}:
 2
 2

julia> min(1:19)
ERROR: MethodError: `min` has no method matching min(::UnitRange{Int64})
Closest candidates are:
  min{T1<:Real,T2<:Real}(::AbstractArray{T1<:Real,N}, ::T2<:Real)
  min{T1<:Real,T2<:Real}(::AbstractArray{T1<:Real,N}, ::AbstractArray{T2<:Real,N})
  min(::Any, ::Any)
  ...

julia> min(1:19, Int)
ERROR: MethodError: `isless` has no method matching isless(::Type{Int64}, ::UnitRange{Int64})
 in min at operators.jl:58

julia> min(collect(1:19), Int)
ERROR: MethodError: `isless` has no method matching isless(::Type{Int64}, ::Array{Int64,1})
 in min at operators.jl:58

julia> min(1, 2, 3)
1

julia> min(i for i in 1:10)
ERROR: syntax: missing comma or ) in argument list

julia> min([i for i in 1:10])
ERROR: MethodError: `min` has no method matching min(::Array{Int64,1})
Closest candidates are:
  min{T1<:Real,T2<:Real}(::AbstractArray{T1<:Real,N}, ::T2<:Real)
  min{T1<:Real,T2<:Real}(::AbstractArray{T1<:Real,N}, ::AbstractArray{T2<:Real,N})
  min(::Any, ::Any)
  ...
 in anonymous at no file

julia> min([i for i in 1:10]...)
1

julia> argmin(a)
ERROR: UndefVarError: argmin not defined

julia> minimum(1:10)
1

julia> 1 + 1 \
       +1
2.0

julia> 1 + 1 + \
ERROR: MethodError: `+` has no method matching +(::Int64, ::Function)
Closest candidates are:
  +(::Any, ::Any, ::Any, ::Any...)
  +(::Int64, ::Int64)
  +(::Integer, ::Ptr{T})
  ...
 in + at operators.jl:103

julia> (1 + 1
       +1 )
3

julia> using Distributions

julia> using socket
ERROR: ArgumentError: socket not found in path
 in require at /Applications/Julia-0.4.5 2.app/Contents/Resources/julia/lib/julia/sys.dylib

help?> socket
search: UDPSocket TCPSocket issocket isblockdev

Couldn't find socket
Perhaps you meant issocket, sort, lock, logdet, oct or TCPSocket
ERROR: "socket" is not defined in module Main
 in error at /Applications/Julia-0.4.5 2.app/Contents/Resources/julia/lib/julia/sys.dylib
 in which_module at /Applications/Julia-0.4.5 2.app/Contents/Resources/julia/lib/julia/sys.dylib
 in call at /Applications/Julia-0.4.5 2.app/Contents/Resources/julia/lib/julia/sys.dylib

help?> TCPSocket
search: TCPSocket

  No documentation found.

  Summary:

  type TCPSocket <: Base.LibuvStream

  Fields:

  handle        :: Ptr{Void}
  status        :: Int64
  line_buffered :: Bool
  buffer        :: Base.AbstractIOBuffer{Array{UInt8,1}}
  readcb        :: Union{Bool,Function}
  readnotify    :: Condition
  ccb           :: Union{Bool,Function}
  connectnotify :: Condition
  closecb       :: Union{Bool,Function}
  closenotify   :: Condition
  sendbuf       :: Nullable{Base.AbstractIOBuffer{Array{UInt8,1}}}
  lock          :: ReentrantLock
  throttle      :: Int64

julia> server = listen(2000)
Base.TCPServer(active)

julia> conn = accept(server
       )
TCPSocket(open, 0 bytes waiting)

julia> line = readline(conn)
"ld\n"

julia> line = readline(conn)
"f\n"

julia> line = readline(conn)
"f\n"

julia> line = readline(conn)
"g\n"

julia> line = readline(conn)
"h\n"

julia> line = readline(conn)
"e\n"

julia> line = readline(conn)
"a\n"

julia> write(conn, "Hello")
5

julia> close(conn)

julia> binomial = (n, p) -> sum([p < rand() for i in n])
(anonymous function)

julia> binomial(2, 1/2)
0

julia> binomial(2, 1/2)
0

julia> binomial(2, 1/2)
1

julia> binomial = (n, p) -> sum(p < rand(n))
(anonymous function)

julia> binomial(2, 1/2)
ERROR: MethodError: `isless` has no method matching isless(::Float64, ::Array{Float64,1})
Closest candidates are:
  isless(::Float64, ::Float64)
  isless(::AbstractFloat, ::AbstractFloat)
  isless(::Real, ::AbstractFloat)
  ...
 in < at operators.jl:33
 in anonymous at none:1

julia> binomial = (n, p) -> sum(p .< rand(n))
(anonymous function)

julia> binomial(3, 1/2)
0

julia> binomial(3, 1/2)
1

julia> binomial(3, 1/2)
2

julia> binomial(3, 1/2)
1

julia> binomial(3, 1/2)
2

julia> binomial(3, 1/2)
2

julia> binomial(10, 1/2)
5

julia> binomial(10, 1/2)
7

julia> binomial(10, 1/2)
4

julia> factorial2 = n -> n == 1 ? 1 : factorial2(n-1)
(anonymous function)

julia> factorial2(12)
1

julia> rand(100)
100-element Array{Float64,1}:
 0.900911  
 0.750277  
 0.224986  
 0.00707576
 0.180864  
 0.423974  
 0.731836  
 0.186213  
 0.898039  
 0.411485  
 ⋮         
 0.178024  
 0.241084  
 0.0717952 
 0.0171441 
 0.711238  
 0.524243  
 0.3194    
 0.322989  
 0.247693  

julia> rand(2,2)
2x2 Array{Float64,2}:
 0.633957  0.127745
 0.495856  0.208446

julia> rand(1,2)
1x2 Array{Float64,2}:
 0.0473372  0.300224

julia> x = rand(2, 100)
2x100 Array{Float64,2}:
 0.929481  0.818995  0.0466208  0.318942  …  0.272237  0.15916   0.417348 
 0.907565  0.225942  0.723228   0.984175     0.848356  0.582628  0.0480903

julia> x[1][1]
0.929480678751351

julia> x[1][2]
ERROR: BoundsError
 in getindex at number.jl:15

julia> x[1 2]
ERROR: MethodError: `typed_hcat` has no method matching typed_hcat(::Array{Float64,2}, ::Int64, ::Int64)
Closest candidates are:
  typed_hcat(::Type{T}, ::Number...)
  typed_hcat(::Type{T}, ::Any...)

julia> x[1, 2]
0.8189952988539109

julia> x[1, 1]
0.929480678751351

julia> function pay()
         s = 0
         for i in 1:10
           if 1/2 > p
             s += 1
           else
             s = 0
           end
           if s >= 3
             return true
           else
             return false
           end
         end
       end
pay (generic function with 1 method)

julia> sum([pay() for i in 1:1000])
ERROR: UndefVarError: p not defined
 in pay at none:4
 in anonymous at no file

julia> function pay()
         s = 0
         for i in 1:10
           if 1/2 > p
             s += 1
           else
             s = 0
           end
           if s >= 3
             return true
           else
             return false
           end
         end
       end
pay (generic function with 1 method)

julia> function pay()
         s = 0
         for i in 1:10
           if 1/2 > rand()
             s += 1
           else
             s = 0
           end
           if s >= 3
             return true
           else
             return false
           end
         end
       end
pay (generic function with 1 method)

julia> sum([pay() for i in 1:10000])
0

julia> function pay()
         s = 0
         rs = rand(10)
         for i in 1:10
           if 1/2 > rs[i]
             s += 1
           else
             s = 0
           end
           if s >= 3
             return true
           else
             return false
           end
         end
       end
pay (generic function with 1 method)

julia> sum([pay() for i in 1:10000])
0

julia> function pay()
         s = 0
         for i in 1:10
           1/2 > rand() ? s += 1 : s = 0
           s >= 3 && return true
         end
         return false
       end
pay (generic function with 1 method)

julia> sum([pay() for i in 1:10000])
5058

julia> sum([pay() for i in 1:10000])
5096

julia> sum([pay() for i in 1:10000])
5064

julia> sum([pay() for i in 1:10000])
5159

julia> sum([pay() for i in 1:10000])
5111

julia> sum([pay() for i in 1:10000])
5105

julia> sum([pay() for i in 1:10000])
5006

julia> sum([pay() for i in 1:10000])
5097

julia> N = 10000000
10000000

julia> s = sum
sum      sum!      sum_kbn   sumabs    sumabs!   sumabs2   sumabs2!  summary
julia> s = n -> sum([pay() for i in n])
(anonymous function)

julia> s = n -> sum([pay() for i in n])/n
(anonymous function)

julia> s(N)
0.0

julia> pay()
true

julia> pay()
false

julia> s(100)
0.0

julia> s = n -> sum([pay() for i in n])/n::Float64
(anonymous function)

julia> s(100)
ERROR: TypeError: anonymous: in typeassert, expected Float64, got Int64
 in anonymous at none:1

julia> s = n -> sum([pay() for i in n])/n
